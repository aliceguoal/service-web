buildscript {
    repositories {
        jcenter()
    }

    dependencies {
        classpath 'org.springframework.boot:spring-boot-gradle-plugin:1.4.0.RELEASE'
    }
}

plugins {
    id 'java'
    id 'eclipse'
    id 'idea'
    id 'jacoco'
    id 'io.spring.dependency-management' version '0.6.0.RELEASE'
    id 'com.github.kt3k.coveralls' version '2.6.3'
    id 'org.sonarqube' version '2.0.1'
    id 'com.jfrog.bintray' version '1.7.1'
}
apply plugin: 'spring-boot'

group = 'sg.ncl'

version "1.0-${System.getenv('TRAVIS_BUILD_NUMBER') == null ? 'SNAPSHOT' : 'b' + System.getenv('TRAVIS_BUILD_NUMBER')}"

sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

repositories {
    jcenter()
}

dependencyManagement {
    dependencies {
        dependency 'commons-io:commons-io:2.5'
        dependency 'org.projectlombok:lombok:1.16.10'
    }
    imports {
        mavenBom 'io.spring.platform:platform-bom:2.0.6.RELEASE'
    }
}

dependencies {
    compile 'org.springframework.boot:spring-boot-configuration-processor'
    compile 'org.springframework.boot:spring-boot-starter-web'
    compile 'org.springframework.boot:spring-boot-starter-thymeleaf'
    compile 'javax.inject:javax.inject'
    compile 'org.json:json'
    compile 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310'
    compile 'commons-io:commons-io'
    compile 'org.projectlombok:lombok'

    testCompile 'org.apache.commons:commons-lang3:3.4'
    testCompile 'org.springframework.boot:spring-boot-starter-test'
}

compileJava {
    dependsOn processResources
}

tasks.jacocoTestReport {
    reports {
        xml {
            enabled true
        }
    }
}

sonarqube {
    properties {
        property 'sonar.host.url', 'https://sonarqube.com'
        property 'sonar.projectKey', 'nus-ncl:service-web'
        property 'sonar.projectName', 'NCLUI'
        property 'sonar.projectVersion', "${project.version}"
        property 'sonar.login', System.getenv('SONAR_TOKEN')
        if (System.getenv('TRAVIS_BRANCH') == 'master') {
            if (System.getenv('TRAVIS_PULL_REQUEST') == 'false') {
            } else {
                property 'sonar.analysis.mode', 'preview'
                property 'sonar.github.pullRequest', System.getenv('TRAVIS_PULL_REQUEST')
                property 'sonar.github.repository', System.getenv('TRAVIS_REPO_SLUG')
                property 'sonar.github.oauth', System.getenv('GITHUB_TOKEN')
            }
        } else {
            property 'sonar.analysis.mode', 'issues'
        }
    }
}

bintray {
    user = System.getenv('BINTRAY_USER')
    key = System.getenv('BINTRAY_KEY')
    configurations = ['archives']
    pkg {
        repo = 'generic'
        name = 'service-web'
        userOrg = 'nus-ncl'
        desc = 'NCL web service'
        vcsUrl = 'https://github.com/nus-ncl/service-web.git'
        licenses = ['Apache-2.0']
    }
}

task wrapper(type: Wrapper) {
    gradleVersion '2.14'
    distributionUrl "https://services.gradle.org/distributions/gradle-${gradleVersion}-all.zip"
}
